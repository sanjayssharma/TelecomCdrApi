{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "CdrConnection": "Server=localhost,14331;Database=CdrStore;User ID=sa;Password=Y0ur_Strong_P@ssword123!;TrustServerCertificate=True;MultipleActiveResultSets=true",
    "HangfireConnection": "Server=localhost,14331;Database=HangfireDb;User Id=sa;Password=Y0ur_Strong_P@ssword123!;TrustServerCertificate=True;MultipleActiveResultSets=true;"
  },
  "AzureBlobStorage": {
    "ConnectionString": "UseDevelopmentStorage=true",
    "ContainerName": "cdr-uploads"
  },
  "AzureQueueStorage": {
    "ConnectionString": "UseDevelopmentStorage=true",
    "JobStatusUpdateQueueName": "job-status-updates"
  },
  "FileUploadSettings": {
    "UploadContainerName": "cdr-direct-uploads",
    "SasValidityMinutes": 60
  },
  "RedisSettings": {
    "ConnectionString": "redis:6379",
    "DefaultExpiryMinutes": 1440 // 1 day
  },
  "ApplicationInsights": {
    "ConnectionString": "" // Read from environment variable, make sure you have the applicationisight connectionstring if you intend to use this
  },
  "Serilog": {
    "MinimumLevel": {
      // Sets the default minimum level for logging events.
      "Default": "Information",
      // Overrides minimum levels for specific sources (e.g., reduce noise from Microsoft components).
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information", // Useful for seeing startup/shutdown info
        "Microsoft.EntityFrameworkCore.Database.Command": "Warning", // Set to Information to see SQL commands
        "System": "Warning"
      }
    },
    // Enrichers add extra context to log events.
    "Enrich": [
      "FromLogContext", // Adds properties pushed onto the LogContext stack
      "WithMachineName", // Adds the machine name
      "WithThreadId", // Adds the managed thread ID
      "WithCorrelationId" // Requires Serilog.Enrichers.CorrelationId package and middleware setup
    ],
    // Properties add static values to all log events.
    "Properties": {
      "Application": "TelecomCdr.API" // Identifies the application generating the logs
    },
    // Sinks define where log events are written to.
    "WriteTo": [
      // Writes logs to the console (useful for container logs).
      {
        "Name": "Console",
        "Args": {
          // Example format: Includes timestamp, level, correlation ID, message, exception, and properties
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {CorrelationId} {Message:lj}{NewLine}{Exception}{Properties:j}"
        }
      },
      // Writes logs to a rolling file.
      {
        "Name": "File",
        "Args": {
          // Path to the log file inside the container.
          // The directory '/app/logs' will be mapped from the host via docker-compose.
          "path": "/app/logs/cdr-api-.log",
          // Specifies how often to create a new log file (e.g., daily).
          "rollingInterval": "Day",
          // Retains log files for the specified number of days (null means keep forever).
          "retainedFileCountLimit": 7,
          // Limits the size of a single log file.
          "fileSizeLimitBytes": 104857600, // 100 MB
          // If true, creates a new file when the size limit is reached within the rolling interval.
          "rollOnFileSizeLimit": true,
          // The format for log messages written to the file.
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {CorrelationId} {Message:lj}{NewLine}{Exception}{Properties:j}"
        }
      },
      // Writes logs to Azure Application Insights.
      {
        "Name": "ApplicationInsights",
        "Args": {
          // Provide EITHER ConnectionString OR InstrumentationKey (ConnectionString recommended).
          // These should ideally be read from environment variables or secure config.
          //"connectionString": "${APPLICATIONINSIGHTS_CONNECTION_STRING}", // Placeholder for env var
          // Note - make sure you have the applicationisight connectionstring if you intend to use this
          "connectionString": "",

          // Controls how logs are sent (Events or Traces). Traces are generally preferred.
          "telemetryConverter": "Serilog.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights"
        }
      }
    ]
  },
  "AllowedHosts": "*"
}
