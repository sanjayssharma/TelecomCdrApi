# docker-compose.yml
# Defines services for local development: API, SQL Server, Redis.

version: '3.8' # Specifies the Docker Compose file format version

services:
  # CDR API Service (Hosts Hangfire Server)
  cdr-api:
    container_name: cdr-api-container # Custom name for the API container
    build:
      context: ../ # Build context is the solution root directory (where Cdr.sln is)
      dockerfile: ./TelecomCdr.API/Dockerfile # Path to the Dockerfile for the API project
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080 (HTTP)
      - "8081:8081" # Map host port 8081 to container port 8081 (HTTPS, if Kestrel is configured for it)
    environment:
      # ASP.NET Core Environment Settings
      - ASPNETCORE_ENVIRONMENT=Development # Sets the environment to Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081 # URLs Kestrel listens on inside the container

      # Connection Strings (Double underscore __ replaces colon : for environment variable mapping)
      # Points to the mssql-server service for the main CDR database (CdrDb)
      - ConnectionStrings__CdrConnection=Server=mssql-server,1433;Database=CdrDb;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;
      # Points to the mssql-server service for the Hangfire database (HangfireDb)
      - ConnectionStrings__HangfireConnection=Server=mssql-server,1433;Database=HangfireDb;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;

      # Azure Blob Storage Configuration (Points to Azurite for local dev, or use actual connection string)
      - AzureBlobStorage__ConnectionString=UseDevelopmentStorage=true # UseDevelopmentStorage=true targets Azurite default shortcut
      # Alternative Azurite connection string if needed:
      # - AzureBlobStorage__ConnectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
      - AzureBlobStorage__ContainerName=cdr-uploads-local # Local container name for uploads

      # Redis Configuration (Points to the redis service defined below)
      - RedisSettings__ConnectionString=redis:6379 # Hostname 'redis' resolves to the Redis service container
      - RedisSettings__DefaultExpiryMinutes=1440 # Example: 24 hours expiry for idempotency keys

      # Serilog Configuration (Example override via environment variables)
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft.AspNetCore=Warning

    volumes:
      # Mount a local directory for logs generated by the API container (optional)
      - ./logs/cdr-api:/app/logs
      # Add other volume mounts if needed (e.g., for source code hot reload during development)
      # - ../src:/app/src:ro # Example: Mounts solution's src folder read-only

    depends_on:
      - mssql-server # Ensures SQL Server starts before the API
      - redis        # Ensures Redis starts before the API
      # - azurite    # Add dependency if running Azurite within Compose (see below)
    networks:
      - cdr-network # Connects the service to the shared network

  # SQL Server Service
  mssql-server:
    container_name: mssql-server-container # Custom name for the SQL Server container
    image: "mcr.microsoft.com/mssql/server:2019-latest" # Use Microsoft's official SQL Server 2019 image
    ports:
      - "1433:1433" # Map host port 1433 to container port 1433 (default SQL Server port)
    environment:
      SA_PASSWORD: "${SA_PASSWORD}" # Sets the SQL Server SA password from an environment variable (use a .env file or export)
      ACCEPT_EULA: "Y" # Required to accept the End-User License Agreement
    volumes:
      - mssql-data:/var/opt/mssql # Persist database data using a named volume
      # Mount initialization scripts directory into the container's init directory
      # Ensure setup.sql creates both CdrDb and HangfireDb databases
      - ./mssql/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - ./mssql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - cdr-network # Connects the service to the shared network

  # Redis Service
  redis:
    container_name: redis-cache-container # Custom name for the Redis container
    image: "redis:alpine" # Use a lightweight Alpine-based Redis image
    ports:
      - "6379:6379" # Map host port 6379 to container port 6379 (default Redis port)
    volumes:
      - redis-data:/data # Persist Redis data using a named volume
    networks:
      - cdr-network # Connects the service to the shared network

  # Optional: Azurite Service (Azure Storage Emulator)
  # Uncomment this section if you want to run Azurite as part of docker-compose
  # instead of running it separately.
  # azurite:
  #   image: mcr.microsoft.com/azure-storage/azurite
  #   container_name: azurite-emulator
  #   hostname: azurite # Allows other services to connect using this hostname
  #   ports:
  #     - "10000:10000" # Default Blob service endpoint
  #     - "10001:10001" # Default Queue service endpoint
  #     - "10002:10002" # Default Table service endpoint
  #   volumes:
  #     - azurite-data:/data # Persist Azurite workspace state
  #   networks:
  #     - cdr-network

# Define Networks used by the services
networks:
  cdr-network:
    driver: bridge # Use the default bridge network driver

# Define Volumes used for persistent storage
volumes:
  mssql-data: # Named volume for SQL Server data
  redis-data:   # Named volume for Redis data
  # azurite-data: # Named volume for Azurite data (uncomment if using Azurite service)
